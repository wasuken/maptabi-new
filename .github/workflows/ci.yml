name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev, main ]

permissions:
  contents: write 

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mapdiary_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/src/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd backend/src
          npm ci
      
      - name: Setup Database
        run: |
          cd backend/src
          cp .env.test.example .env.test
          npm run db:setup:test || echo "No db setup script found"
      
      - name: Run backend tests
        run: |
          cd backend/src
          npm test
      
      - name: Run linting
        run: |
          cd backend/src
          npm run lint
  
  frontend-tests:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/src/package-lock.json'
      
      - name: Setup and install dependencies
        run: |
          cd frontend/src
          rm -rf node_modules
          # package-lock.jsonを再生成するためにnpm installを実行
          npm install
          # 生成されたpackage-lock.jsonを使用してnpm ciを実行
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend/src
          npm run lint
      
      - name: Run unit tests
        run: |
          cd frontend/src
          npm test || echo "No test script found"

      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          config: baseUrl=http://localhost:4173
          working-directory: frontend/src
          build: npm run build
          start: npm run preview
          wait-on: 'http://localhost:4173'
          wait-on-timeout: 300
          browser: chrome
          headless: true
          spec: 'cypress/e2e/*.cy.{js,ts}'

  promote-to-main:
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev' && needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Push to main
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout main
          git merge --ff-only origin/dev
          git push origin main
  

  discord-notification:
    needs: [backend-tests, frontend-tests, promote-to-main]
    if: always()  # テストの成功/失敗に関わらず常に通知
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get commit details
        id: commit-details
        run: |
          # イベントタイプによって取得方法を分岐
          SHA=$([ "${{ github.event_name }}" == "pull_request" ] && echo "${{ github.event.pull_request.head.sha }}" || echo "HEAD")
          BASE=$([ "${{ github.event_name }}" == "pull_request" ] && echo "${{ github.event.pull_request.base.sha }}" || echo "HEAD~1")
          
          # 各種情報を取得
          AUTHOR=$(git log -1 $SHA --pretty=format:'%an')
          MESSAGE=$(git log -1 $SHA --pretty=format:'%s')
          CHANGES=$(git diff --name-only --diff-filter=ACMRT $BASE $SHA | wc -l)
          
          # マルチライン出力のためのデリミタを設定
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT
          
          # 変更ファイルリストをマルチライン出力として設定
          echo "files_changed<<EOF" >> $GITHUB_OUTPUT
          git diff --name-only --diff-filter=ACMRT $BASE $SHA | sort | head -10 | sed 's/^/- /' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Set status info
        id: status
        run: |
          # ステータス絵文字の設定
          backend_result="${{ needs.backend-tests.result }}"
          frontend_result="${{ needs.frontend-tests.result }}"
          promote_result="${{ needs.promote-to-main.result }}"
          
          # バックエンドとフロントエンドのステータス
          [ "$backend_result" == "success" ] && backend_emoji="✅" || backend_emoji="❌"
          [ "$frontend_result" == "success" ] && frontend_emoji="✅" || frontend_emoji="❌"
          
          # デプロイステータス
          if [ "$promote_result" == "success" ]; then
            promote_emoji="✅"
            promote_text="成功"
          elif [ "$promote_result" == "skipped" ]; then
            promote_emoji="⏭️"
            promote_text="スキップ"
          else
            promote_emoji="❌"
            promote_text="失敗"
          fi
          
          # 全体的なステータス
          if [ "$backend_result" == "success" ] && [ "$frontend_result" == "success" ] && 
             ([ "$promote_result" == "success" ] || [ "$promote_result" == "skipped" ]); then
            overall_emoji="✅"
            color="3066993"
          else
            overall_emoji="❌"
            color="15158332"
          fi
          
          echo "backend_emoji=$backend_emoji" >> $GITHUB_OUTPUT
          echo "frontend_emoji=$frontend_emoji" >> $GITHUB_OUTPUT
          echo "promote_emoji=$promote_emoji" >> $GITHUB_OUTPUT
          echo "promote_text=$promote_text" >> $GITHUB_OUTPUT
          echo "overall_emoji=$overall_emoji" >> $GITHUB_OUTPUT
          echo "color=$color" >> $GITHUB_OUTPUT
      
      - name: Send Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_USERNAME: GitHub CI/CD
          DISCORD_AVATAR: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        with:
          args: |
            ${{ steps.status.outputs.overall_emoji }} **ワークフロー結果: ${{ github.workflow }}**
            
            **ビルド #${{ github.run_number }}** ($(date +"%Y-%m-%d %H:%M:%S"))
            **リポジトリ:** [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})
            **ブランチ:** `${{ github.ref_name }}`
            **イベント:** ${{ github.event_name }}
            
            **コミット情報:**
            • メッセージ: ${{ steps.commit-details.outputs.message }}
            • 著者: ${{ steps.commit-details.outputs.author }}
            • 変更ファイル数: ${{ steps.commit-details.outputs.changes }}
            
            **テスト結果:**
            ${{ steps.status.outputs.backend_emoji }} **バックエンド:** ${{ needs.backend-tests.result }}
            ${{ steps.status.outputs.frontend_emoji }} **フロントエンド:** ${{ needs.frontend-tests.result }}
            
            **デプロイ状況:**
            ${{ steps.status.outputs.promote_emoji }} **メインブランチへのプロモート:** ${{ steps.status.outputs.promote_text }}
            
            **変更ファイル (最大10件):**
            ```
            ${{ steps.commit-details.outputs.files_changed }}
            ```
            
            [ワークフロー実行詳細](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
